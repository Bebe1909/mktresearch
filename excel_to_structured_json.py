import pandas as pd
import json
import os

class ExcelToStructuredJSON:
    """
    L·ªõp chuy·ªÉn ƒë·ªïi Excel framework th√†nh JSON c√≥ c·∫•u tr√∫c
    H·ªó tr·ª£ cho c·∫£ web UI v√† CLI
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o converter"""
        pass
    
    def convert_excel_to_json(self, excel_path, json_path, custom_purpose=None):
        """
        Chuy·ªÉn ƒë·ªïi Excel framework th√†nh JSON c√≥ c·∫•u tr√∫c
        
        Args:
            excel_path (str): ƒê∆∞·ªùng d·∫´n t·ªõi file Excel
            json_path (str): ƒê∆∞·ªùng d·∫´n output file JSON
            custom_purpose (str): M·ª•c ƒë√≠ch custom (n·∫øu c√≥)
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng, False n·∫øu l·ªói
        """
        try:
            # ƒê·ªçc sheet template (updated from "Market Research")
            df = pd.read_excel(excel_path, sheet_name="template")
            
            print("‚úÖ ƒê√£ ƒë·ªçc file Excel th√†nh c√¥ng!")
            print(f"üìä K√≠ch th∆∞·ªõc d·ªØ li·ªáu: {df.shape}")
            
            # T√¨m d√≤ng "M·ª•c ƒë√≠ch c·ªßa Market Research"
            purpose_row = None
            purpose_content = None
            
            for idx, row in df.iterrows():
                if any("M·ª•c ƒë√≠ch c·ªßa Market Research" in str(cell) for cell in row if pd.notna(cell)):
                    purpose_row = idx
                    # T√¨m n·ªôi dung purpose trong c√°c c·ªôt
                    for col in df.columns:
                        if pd.notna(row[col]) and "M·ª•c ƒë√≠ch c·ªßa Market Research" not in str(row[col]):
                            if str(row[col]).strip():
                                purpose_content = str(row[col])
                                break
                    break
            
            # S·ª≠ d·ª•ng custom purpose n·∫øu c√≥, ng∆∞·ª£c l·∫°i d√πng purpose t·ª´ Excel
            final_purpose = custom_purpose if custom_purpose else (purpose_content if purpose_content else "Nghi√™n c·ª©u v√† ph√¢n t√≠ch th·ªã tr∆∞·ªùng")
            
            # Kh·ªüi t·∫°o c·∫•u tr√∫c JSON k·∫øt qu·∫£
            result = {
                "purpose": final_purpose,
                "layers": []
            }
            
            # Ph√¢n t√≠ch c√°c layer (b·∫Øt ƒë·∫ßu t·ª´ sau d√≤ng purpose)
            if purpose_row is not None:
                # T√¨m header c·ªßa layers (Layer 1, Layer 2, etc.)
                layer_header_row = None
                for idx in range(purpose_row + 1, len(df)):
                    row = df.iloc[idx]
                    if any("Layer" in str(cell) for cell in row if pd.notna(cell)):
                        layer_header_row = idx
                        break
                
                if layer_header_row is not None:
                    print(f"üìç T√¨m th·∫•y header layers ·ªü d√≤ng {layer_header_row}")
                    
                    # Get header row to determine number of layers dynamically
                    header_row = df.iloc[layer_header_row]
                    layer_columns = []
                    
                    # Find all Layer columns dynamically
                    for col_idx, col_val in enumerate(header_row):
                        if pd.notna(col_val) and "Layer" in str(col_val):
                            layer_columns.append(col_idx)
                    
                    print(f"üîç Detected {len(layer_columns)} layer columns: {[f'Layer {i+1}' for i in range(len(layer_columns))]}")
                    
                    if len(layer_columns) < 3:
                        print("‚ö†Ô∏è Warning: Need at least 3 layers (Layer 1, Layer 2, Layer 3) for proper structure")
                        return False
                    
                    # Dynamic layer tracking
                    layer_stack = [None] * len(layer_columns)  # Track current value at each layer level
                    
                    # Ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ d√≤ng ti·∫øp theo
                    for idx in range(layer_header_row + 1, len(df)):
                        row = df.iloc[idx]
                        
                        # B·ªè qua d√≤ng tr·ªëng
                        if row.isna().all():
                            continue
                        
                        # Get values for all layer columns
                        layer_values = []
                        for col_idx in layer_columns:
                            if col_idx < len(row):
                                val = row.iloc[col_idx]
                                layer_values.append(str(val) if pd.notna(val) and str(val) != 'None' else None)
                            else:
                                layer_values.append(None)
                        
                        # Process layers dynamically
                        for level, value in enumerate(layer_values):
                            if value:  # Non-empty value at this level
                                # Reset deeper levels
                                for deeper_level in range(level + 1, len(layer_stack)):
                                    layer_stack[deeper_level] = None
                                
                                if level == 0:  # Layer 1 - Top level framework
                                    current_layer1 = {
                                        "name": value,
                                        "categories": []
                                    }
                                    result["layers"].append(current_layer1)
                                    layer_stack[0] = current_layer1
                                    
                                elif level == 1 and layer_stack[0]:  # Layer 2 - Categories
                                    current_layer2 = {
                                        "name": value,
                                        "questions": []
                                    }
                                    layer_stack[0]["categories"].append(current_layer2)
                                    layer_stack[1] = current_layer2
                                    
                                elif level == 2 and layer_stack[1]:  # Layer 3 - Main questions
                                    question = {
                                        "main_question": value,
                                        "sub_questions": []
                                    }
                                    layer_stack[1]["questions"].append(question)
                                    layer_stack[2] = question
                                    
                                elif level >= 3 and layer_stack[2]:  # Layer 4+ - Sub-questions or deeper analysis
                                    # Add as sub-question to current main question
                                    layer_stack[2]["sub_questions"].append(value)
                                
                                break  # Process only the first non-empty value in this row
            
            # ƒê·∫£m b·∫£o folder output t·ªìn t·∫°i
            os.makedirs(os.path.dirname(json_path), exist_ok=True)
            
            # L∆∞u k·∫øt qu·∫£ ra file JSON
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!")
            print(f"üìÅ File output: {json_path}")
            print(f"üìä S·ªë l∆∞·ª£ng layers: {len(result['layers'])}")
            
            return True
            
        except FileNotFoundError:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {excel_path}")
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False

def convert_market_research_to_json():
    """
    H√†m legacy ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi CLI
    Chuy·ªÉn ƒë·ªïi sheet 'template' t·ª´ market research template.xlsx 
    th√†nh JSON c√≥ c·∫•u tr√∫c v·ªõi purpose v√† layers
    """
    
    # S·ª≠ d·ª•ng class m·ªõi - updated to use new file name
    converter = ExcelToStructuredJSON()
    excel_file = "input/market research template.xlsx"
    json_file = "output/market_research_structured.json"
    
    success = converter.convert_excel_to_json(excel_file, json_file)
    
    if success:
        # Load v√† return k·∫øt qu·∫£ ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
        with open(json_file, 'r', encoding='utf-8') as f:
            result = json.load(f)
        return result
    else:
        return None

if __name__ == "__main__":
    result = convert_market_research_to_json()
    
    if result:
        print("\n--- Preview JSON structure ---")
        print(f"Purpose: {result['purpose'][:100]}...")
        print(f"Number of layers: {len(result['layers'])}")
        if result['layers']:
            print(f"First layer: {result['layers'][0]['name']}")
            if result['layers'][0]['categories']:
                print(f"First category: {result['layers'][0]['categories'][0]['name']}") 